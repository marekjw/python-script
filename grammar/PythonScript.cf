-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [Stmt];

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

StmtFun.   Stmt ::= Function;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

TRet.      Stmt ::= "\\return" Expr ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

Print.     Stmt ::= "print" "(" [Expr] ")";

ForLoop.   Stmt ::= "for" "(" Stmt  Expr ";" Stmt ")" Stmt ;

-- FUNCTIONS -----------------------------------------------
FnDef.	   Function ::= Type Ident "(" [Arg] ")" Block ;

separator nonempty Function "" ;

Arg. 	   Arg ::= FunType Ident;

separator  Arg "," ;

Reference. FunType ::= "&" Type;

ByValue. FunType ::= Type;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Char.      Type ::= "char" ;

Void.      Type ::= "void" ;

Tuple.     Type ::= "(" [Type] ")";

internal   Fun. Type ::= Type "(" [FunType] ")" ;

separator  Type "," ;

separator FunType ",";

-- Arrays -------------------------------------------------

ArrayType. Type ::= Type "[" Integer "]";

ArrayGet. AGet ::= Ident "[" Integer "]";

ArraySet. Stmt ::= AGet "=" Expr;

-- TUPLES -------------------------------------------------

TupleUnpack. Stmt ::= UnpackedTuple "=" Ident;

TupleUnpackStruct. UnpackedTuple ::= "("[UnpackedArg]")";

separator UnpackedArg ",";

HowToUnpackVar. UnpackedArg ::= Type Ident;

HowToUnpackTup. UnpackedArg ::= UnpackedTuple;

-- ANONYMUS FUNCTIONS -------------------------------------

LambdaFun. Type ::= "\\(" [FunType] ")" "=>" Type;

LambdaFunVal. Expr7 ::= "\\(" [Arg] ")" "=>" Stmt;

-- GENERATORS ---------------------------------------------

GenDef. Stmt ::= "generator" "<" Type ">" Ident "(" [Arg] ")" Stmt;

Yield. Stmt ::= "yeet" Expr;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitChar.  Expr6 ::= Char;

ELitTrue.  Expr6 ::= "True" ;

ELitFalse. Expr6 ::= "False" ;

ArrGetExpr. Expr6 ::= AGet;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

TupleExpr. Expr ::= "(" [Expr] ")";

coercions  Expr 7 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

